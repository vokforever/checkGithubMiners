import asyncio
import json
import os
import logging
import re
import sys
from datetime import datetime, timezone, timedelta
from typing import Dict, Optional, List, Set

from aiohttp import ClientSession, ClientError
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó .ENV ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHECK_INTERVAL_MINUTES = int(os.getenv("CHECK_INTERVAL_MINUTES", "10"))

REPOS = [
    "https://github.com/andru-kun/wildrig-multi/releases",
    "https://github.com/OneZeroMiner/onezerominer/releases",
    "https://github.com/trexminer/T-Rex/releases",
    "https://github.com/xmrig/xmrig/releases",
    "https://github.com/Lolliedieb/lolMiner-releases/releases",
    "https://github.com/doktor83/SRBMiner-Multi/releases",
    "https://github.com/nicehash/nicehashminer/releases",
    "https://github.com/pooler/cpuminer/releases",
    "https://github.com/rplant8/cpuminer-opt-rplant/releases",
    "https://github.com/JayDDee/cpuminer-opt/releases",
    "https://github.com/alephium/cpu-miner/releases"
]

STATE_FILE = "last_releases.json"
FILTERS_FILE = "user_filters.json"
HISTORY_FILE = "releases_history.json"

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
print(f"BOT_TOKEN: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
print(f"CHANNEL_ID: {CHANNEL_ID if CHANNEL_ID else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
print(f"CHECK_INTERVAL_MINUTES: {CHECK_INTERVAL_MINUTES}")
print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {len(REPOS)}")
for i, repo in enumerate(REPOS, 1):
    print(f"  {i}. {repo}")


# --- –•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø ---
def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'r') as f:
            return json.load(f)
    return {}


def save_state(state):
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f)


# --- –•–†–ê–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
def load_filters():
    if os.path.exists(FILTERS_FILE):
        with open(FILTERS_FILE, 'r') as f:
            return json.load(f)
    return {}


def save_filters(filters):
    with open(FILTERS_FILE, 'w') as f:
        json.dump(filters, f)


# --- –•–†–ê–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –†–ï–õ–ò–ó–û–í ---
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []


def save_history(history):
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    if history:
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)
        filtered_history = []
        for rel in history:
            try:
                pub_date = datetime.fromisoformat(rel['published_at'].replace('Z', '+00:00'))
                if pub_date >= thirty_days_ago:
                    filtered_history.append(rel)
            except:
                continue
        history = filtered_history

    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏
user_filters = load_filters()
releases_history = load_history()
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {len(user_filters)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–ª–∏–∑–æ–≤: {len(releases_history)}")


# --- –ü–ê–†–°–ò–ù–ß–ò–ö HTML –°–¢–†–ê–ù–ò–¶–´ –†–ï–õ–ò–ó–û–í ---
async def parse_html_releases(session, repo_url):
    try:
        async with session.get(repo_url) as response:
            if response.status != 200:
                return None

            html = await response.text()
            soup = BeautifulSoup(html, 'html.parser')

            release_section = soup.find('section', {'class': 'release-entry'})
            if not release_section:
                return None

            release_data = {}

            tag_element = release_section.find('a', {'class': 'Link--primary'})
            if tag_element:
                release_data['tag_name'] = tag_element.get_text(strip=True)

            name_element = release_section.find('div', {'class': 'release-main-section'})
            if name_element:
                h1 = name_element.find('h1')
                if h1:
                    release_data['name'] = h1.get_text(strip=True)

            date_element = release_section.find('relative-time')
            if date_element:
                release_data['published_at'] = date_element.get('datetime')

            desc_element = release_section.find('div', {'class': 'markdown-body'})
            if desc_element:
                release_data['body'] = desc_element.get_text(strip=True)

            assets = []
            asset_links = release_section.find_all('a', {'href': re.compile(r'/releases/download/')})
            for link in asset_links:
                asset_name = link.get_text(strip=True)
                if not asset_name.startswith("Source code"):
                    asset_url = "https://github.com" + link['href']
                    assets.append({
                        'name': asset_name,
                        'browser_download_url': asset_url
                    })

            release_data['assets'] = assets
            return release_data

    except Exception as e:
        logger.error(f"HTML parsing failed for {repo_url}: {e}")
        return None


# --- –ó–ê–ì–†–£–ó–ö–ê –ò–ù–§–´ –û –†–ï–õ–ò–ó–ê–• (API + HTML) ---
async def fetch_release(session, repo_url, max_retries=3):
    api_url = repo_url.replace("https://github.com/", "https://api.github.com/repos/") + "/latest"
    headers = {}
    if GITHUB_TOKEN:
        headers['Authorization'] = f'token {GITHUB_TOKEN}'

    for attempt in range(max_retries):
        try:
            async with session.get(api_url, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 403:
                    reset_time = int(response.headers.get('X-RateLimit-Reset', 0))
                    current_time = int(datetime.now().timestamp())
                    wait_time = max(reset_time - current_time, 60)
                    logger.warning(f"Rate limit exceeded. Waiting {wait_time} seconds")
                    await asyncio.sleep(wait_time)
                    continue
                elif response.status == 404:
                    logger.error(f"Repository not found via API: {repo_url}")
                    break

            logger.info(f"Falling back to HTML parsing for {repo_url}")
            html_data = await parse_html_releases(session, repo_url)
            if html_data:
                return html_data

        except ClientError as e:
            logger.error(f"Request failed: {e}")
            if attempt == max_retries - 1:
                return await parse_html_releases(session, repo_url)
            await asyncio.sleep(2 ** attempt)

    return None


# --- –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –§–ò–õ–¨–¢–†–ê–ú ---
def matches_filters(release_data: dict, keywords: List[str]) -> bool:
    if not keywords:
        return True

    search_text = ""

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    if release_data.get('name'):
        search_text += release_data['name'].lower() + " "

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
    if release_data.get('tag_name'):
        search_text += release_data['tag_name'].lower() + " "

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if release_data.get('body'):
        search_text += release_data['body'].lower() + " "

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    for keyword in keywords:
        if keyword.lower() not in search_text:
            return False

    return True


# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ---
def format_release_message(repo_name, release):
    tag = release.get('tag_name', 'Unknown')
    name = release.get('name', tag)
    body = release.get('body', '')
    published_at = release.get('published_at', '')
    assets = release.get('assets', [])

    links = []
    for asset in assets:
        asset_name = asset.get('name', '')
        download_url = asset.get('browser_download_url', '')
        if asset_name and download_url and not asset_name.startswith("Source code"):
            links.append(f"[{asset_name}]({download_url})")

    message = (
        f"üöÄ *–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo_name}*\n\n"
        f"*{name}*\n"
        f"`{tag}`\n"
    )

    if published_at:
        try:
            pub_date = datetime.fromisoformat(published_at.replace('Z', '+00:00'))
            message += f"üìÖ {pub_date.strftime('%Y-%m-%d %H:%M')}\n\n"
        except:
            message += "\n"
    else:
        message += "\n"

    if body:
        message += f"{body}\n\n"

    if links:
        message += "üì• *–°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:*\n" + "\n".join(links)
    else:
        message += "‚ö†Ô∏è –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    return message


# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–õ–ò–ó–ê –í –ò–°–¢–û–†–ò–Æ ---
def add_to_history(repo_name, release):
    global releases_history

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ä–µ–ª–∏–∑–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    exists = any(
        rel['repo_name'] == repo_name and rel['tag_name'] == release.get('tag_name')
        for rel in releases_history
    )

    if not exists:
        history_entry = {
            'repo_name': repo_name,
            'tag_name': release.get('tag_name'),
            'name': release.get('name'),
            'published_at': release.get('published_at'),
            'body': release.get('body'),
            'assets': release.get('assets', [])
        }
        releases_history.append(history_entry)
        save_history(releases_history)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–ª–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é: {repo_name} {release.get('tag_name')}")


# --- –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–õ–ò–ó–û–í –ó–ê –î–ê–¢–£ ---
def get_releases_by_date(target_date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    releases = []
    for rel in releases_history:
        try:
            pub_date = datetime.fromisoformat(rel['published_at'].replace('Z', '+00:00')).date()
            if pub_date == target_date:
                releases.append(rel)
        except:
            continue
    return releases


# --- –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–õ–ò–ó–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï –î–ù–ò ---
def get_recent_releases(days=3):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    releases = []
    cutoff_date = datetime.now(timezone.utc).date() - timedelta(days=days)

    for rel in releases_history:
        try:
            pub_date = datetime.fromisoformat(rel['published_at'].replace('Z', '+00:00')).date()
            if pub_date >= cutoff_date:
                releases.append(rel)
        except:
            continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    releases.sort(key=lambda x: x['published_at'], reverse=True)
    return releases


# --- –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô ---
async def check_updates(bot: Bot):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    print("=== –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===")
    state = load_state()
    async with ClientSession() as session:
        for repo_url in REPOS:
            print(f"–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_url}")
            repo_name = repo_url.split("/")[-2] + "/" + repo_url.split("/")[-1]
            release = await fetch_release(session, repo_url)

            if not release:
                logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ª–∏–∑–∞—Ö –¥–ª—è {repo_name}")
                continue

            current_tag = release.get('tag_name')
            if not current_tag:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞ –¥–ª—è {repo_name}")
                continue

            last_tag = state.get(repo_name)
            print(f"–¢–µ–∫—É—â–∏–π —Ç–µ–≥: {current_tag}, –ø—Ä–µ–¥—ã–¥—É—â–∏–π: {last_tag}")

            if last_tag != current_tag:
                print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑: {current_tag}")
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                add_to_history(repo_name, release)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                notified_users = set()
                for user_id, filters in user_filters.items():
                    if matches_filters(release, filters):
                        if user_id not in notified_users:
                            message = format_release_message(repo_name, release)
                            try:
                                await bot.send_message(user_id, message, parse_mode="Markdown")
                                notified_users.add(user_id)
                                logger.info(
                                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {repo_name} {current_tag}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
                if not notified_users and CHANNEL_ID:
                    message = format_release_message(repo_name, release)
                    try:
                        await bot.send_message(CHANNEL_ID, message, parse_mode="Markdown")
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –¥–ª—è {repo_name} {current_tag}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª

                state[repo_name] = current_tag

    save_state(state)
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# --- –ö–û–ú–ê–ù–î–ê /start ---
async def start_command(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ GitHub.\n\n"
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/filter - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/myfilters - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/clearfilters - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/today - —Ä–µ–ª–∏–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã –∑–∞ 3 –¥–Ω—è
    recent_releases = get_recent_releases(3)
    if recent_releases:
        await message.answer("üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã –∑–∞ 3 –¥–Ω—è:*\n")
        for rel in recent_releases:
            msg = format_release_message(rel['repo_name'], rel)
            await message.answer(msg, parse_mode="Markdown")
    else:
        await message.answer("üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –±—ã–ª–æ.")


# --- –ö–û–ú–ê–ù–î–ê /today ---
async def today_command(message: Message):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

    today = datetime.now(timezone.utc).date()
    today_releases = get_releases_by_date(today)

    if not today_releases:
        await message.answer("üì≠ –°–µ–≥–æ–¥–Ω—è —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –±—ã–ª–æ.")
    else:
        await message.answer("üìÖ *–†–µ–ª–∏–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n")
        for rel in today_releases:
            msg = format_release_message(rel['repo_name'], rel)
            await message.answer(msg, parse_mode="Markdown")


# --- –ö–û–ú–ê–ù–î–ê /filter ---
async def filter_command(message: Message):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_filter")

    await message.answer(
        "üîç *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `qubitcoin qtc`\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ä–µ–ª–∏–∑–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è—Ö.",
        reply_markup=keyboard.as_markup()
    )
    await message.answer("‚è≥ –û–∂–∏–¥–∞—é –≤–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")


# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´ ---
async def cancel_filter_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    await callback.message.edit_text(
        "‚ùå *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞*",
        reply_markup=None
    )
    await callback.answer()


# --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –ü–û–°–õ–ï /filter ---
async def process_filter_text(message: Message):
    user_id = str(message.from_user.id)
    keywords = message.text.strip().split()

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã: {keywords}")

    if not keywords:
        await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    user_filters[user_id] = keywords
    save_filters(user_filters)

    await message.answer(
        f"‚úÖ *–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
        f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Ä–µ–ª–∏–∑–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —ç—Ç–∏ —Å–ª–æ–≤–∞."
    )


# --- –ö–û–ú–ê–ù–î–ê /myfilters ---
async def myfilters_command(message: Message):
    user_id = str(message.from_user.id)
    filters = user_filters.get(user_id, [])

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {filters}")

    if not filters:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
    else:
        await message.answer(
            f"üìã *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(filters)}"
        )


# --- –ö–û–ú–ê–ù–î–ê /clearfilters ---
async def clearfilters_command(message: Message):
    user_id = str(message.from_user.id)

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—â–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã")

    if user_id in user_filters:
        del user_filters[user_id]
        save_filters(user_filters)
        await message.answer("üóëÔ∏è –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("üì≠ –£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")


# --- –ö–û–ú–ê–ù–î–ê /help ---
async def help_command(message: Message):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å")
    await message.answer(
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "üîç *–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤:*\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /filter\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
        "3. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–∏–∑—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–∏ —Å–ª–æ–≤–∞\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:*\n"
        "/filter - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/myfilters - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/clearfilters - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
        "üìÖ *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ª–∏–∑–æ–≤:*\n"
        "/today - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–ª–∏–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã –∑–∞ 3 –¥–Ω—è\n\n"
        "üìå *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:*\n"
        "–ë–æ—Ç –∏—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞\n"
        "‚Ä¢ –¢–µ–≥–µ –≤–µ—Ä—Å–∏–∏\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ 'qubitcoin qtc', –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–∏–∑—ã, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —ç—Ç–∏ —Å–ª–æ–≤–∞."
    )


# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
def register_handlers(dp: Dispatcher):
    print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(start_command, CommandStart())
    dp.message.register(filter_command, Command("filter"))
    dp.message.register(myfilters_command, Command("myfilters"))
    dp.message.register(clearfilters_command, Command("clearfilters"))
    dp.message.register(today_command, Command("today"))
    dp.message.register(help_command, Command("help"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /filter
    dp.message.register(process_filter_text, F.text & ~F.command)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
    dp.callback_query.register(cancel_filter_callback, F.data == "cancel_filter")

    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# --- MAIN ---
async def main():
    print("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
        print("–û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
        return

    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
    dp = Dispatcher()

    print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_handlers(dp)

    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_updates,
        'interval',
        minutes=CHECK_INTERVAL_MINUTES,
        kwargs={'bot': bot},
        id='github_release_check'
    )
    scheduler.start()

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    print("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ===")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ª–∏–∑–æ–≤
    print("–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ª–∏–∑–æ–≤...")
    try:
        await check_updates(bot)
        print("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–∏–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–∏–∑–æ–≤: {e}")
        print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    try:
        print("–ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
        print(f"–û–®–ò–ë–ö–ê: {e}")
    finally:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        await bot.session.close()
        scheduler.shutdown()


if __name__ == "__main__":
    try:
        print("=== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise