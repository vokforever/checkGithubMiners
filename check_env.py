#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import sys
from dotenv import load_dotenv

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('.env'):
        load_dotenv()
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = {
        'BOT_TOKEN': 'Telegram Bot Token',
        'GITHUB_TOKEN': 'GitHub API Token', 
        'CHANNEL_ID': 'Telegram Channel ID',
        'ADMIN_ID': 'Admin User ID',
        'SUPABASE_URL': 'Supabase Project URL',
        'SUPABASE_KEY': 'Supabase API Key (anon or service_role)'
    }
    
    missing_vars = []
    available_vars = []
    
            for var, description in required_vars.items():
            value = os.getenv(var)
            if value and value != 'dummy':
                available_vars.append(f"‚úÖ {var}: {description}")
                if var in ['SUPABASE_KEY', 'BOT_TOKEN']:
                    print(f"‚úÖ {var}: {description} (–¥–ª–∏–Ω–∞: {len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    print(f"‚úÖ {var}: {description}")
            else:
                missing_vars.append(var)
                print(f"‚ùå {var}: {description} - –ù–ï –ù–ê–°–¢–†–û–ï–ù")
    
    print("\n" + "=" * 50)
    
    if missing_vars:
        print(f"üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(missing_vars)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}")
        
        print("\nüí° –†–µ—à–µ–Ω–∏—è:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env_template.txt")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ CapRover/Coolify –ø–∞–Ω–µ–ª–∏")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        return False
    else:
        print("üéâ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        return True

def create_env_template():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞"""
    template = """# Bot Configuration
BOT_TOKEN=your_telegram_bot_token_here
GITHUB_TOKEN=your_github_token_here
CHANNEL_ID=your_telegram_channel_id_here
ADMIN_ID=your_admin_user_id_here

# Supabase Configuration
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_KEY=your_api_key_here

# Optional: Legacy variable names for compatibility
# SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here
# SUPABASE_ANON_KEY=your_anon_key_here

# Check interval in minutes
CHECK_INTERVAL_MINUTES=60
"""
    
    try:
        with open('.env.example', 'w', encoding='utf-8') as f:
            f.write(template)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.example")
        print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env.example: {e}")

def test_supabase_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    try:
        from supabase_config import SupabaseManager
        supabase = SupabaseManager()
        print("‚úÖ SupabaseManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏ –∫–ª—é—á
        if supabase.supabase_url and supabase.supabase_url != 'dummy':
            print(f"‚úÖ Supabase URL: {supabase.supabase_url[:30]}...")
        else:
            print("‚ùå Supabase URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        if supabase.supabase_key and supabase.supabase_key != 'dummy':
            print(f"‚úÖ Supabase Key: {supabase.supabase_key[:10]}...")
        else:
            print("‚ùå Supabase Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SupabaseManager: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SupabaseManager: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ GitHub Miners Bot - Environment Checker")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = check_environment()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_supabase_connection()
    
    print("\n" + "=" * 50)
    
    if env_ok:
        print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug –≤ Telegram")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /priority –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
    else:
        print("üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ CapRover")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞
    create_env_template()

if __name__ == "__main__":
    main()
